@page "/weather"
@using System.Net.WebSockets
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Blazor with ROS</h3>

<div id="map" style="width: 640px; height: 480px; border: 1px solid black;"></div>

<button @onclick="ConnectToRos">Connect to ROS</button>
<button @onclick="PublishMessage">Publish Message</button>

@code {
    private ClientWebSocket rosSocket = new ClientWebSocket();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeBlazor();
            await InitializeMap();
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     Console.WriteLine("Component Initialized");
    //     await ConnectRosbridge();
    // }

    // private async Task ConnectRosbridge()
    // {
    //     try
    //     {
    //         Uri serverUri = new Uri("ws://192.168.137.218:9090");
    //         await rosSocket.ConnectAsync(serverUri, CancellationToken.None);
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error connecting to Rosbridge: {ex.Message}");
    //     }
    // }

    private async Task InitializeBlazor()
    {
        await JS.InvokeVoidAsync("console.log", "Blazor initialized");
    }

    private async Task ConnectToRos()
    {
        await JS.InvokeVoidAsync("connectToRos", "ws://192.168.137.218:9090");
    }

    private async Task InitializeMap()
    {
        await JS.InvokeVoidAsync("initMap");
    }

    private async Task PublishMessage()
    {
        var messageData = new { data = "Hello, ROS!" };
        await JS.InvokeVoidAsync("publishTopic", "/chatter", "std_msgs/String", messageData);
    }

    [JSInvokable]
    public static Task OnRosConnected()
    {
        Console.WriteLine("Connected to ROS.");
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task OnRosError(string errorMessage)
    {
        Console.WriteLine($"ROS connection error: {errorMessage}");
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task OnRosClosed()
    {
        Console.WriteLine("ROS connection closed.");
        return Task.CompletedTask;
    }
}
