@page "/odom"
@inject IRosbridgeMessageDispatcher MessageDispatcher
@rendermode InteractiveServer
@using RosbridgeNet.RosbridgeClient.Common.Attributes
@using RosbridgeNet.RosbridgeClient.ProtocolV2
@using RosbridgeNet.RosbridgeClient.ProtocolV2.Generics
@using RosbridgeNet.RosbridgeClient.ProtocolV2.Generics.Interfaces
@using RosbridgeNet.RosbridgeClient.Common.Interfaces
@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json.Linq
@using MudBlazor
@using System.Net.WebSockets

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<h3>Blazor Rosbridge Subscriber</h3>

<div>
    <p>Position: x = @positionXFormatted, y = @positionYFormatted, z = @positionZFormatted</p>
    <p>Orientation: x = @orientationXFormatted, y = @orientationYFormatted, z = @orientationZFormatted, w = @orientationWFormatted</p>
</div>

@code {
    private double positionX, positionY, positionZ;
    private double orientationX, orientationY, orientationZ, orientationW;
    // Biến để lưu trữ giá trị đã được định dạng
    private string? positionXFormatted, positionYFormatted, positionZFormatted;
    private string? orientationXFormatted, orientationYFormatted, orientationZFormatted, orientationWFormatted;

    private ClientWebSocket rosSocket = new ClientWebSocket();

    // Khởi tạo và đăng ký sự kiện
    protected override async Task OnInitializedAsync()
    {
        //Console.WriteLine("Component Initialized");
        await ConnectRosbridge();
    }

    private async Task ConnectRosbridge()
    {
        try
        {
            Uri serverUri = new Uri("ws://192.168.137.218:9090");
            await rosSocket.ConnectAsync(serverUri, CancellationToken.None);

            // Subscribe to the topic "/odom"
            string subscribeRequest = "{\"op\":\"subscribe\",\"topic\":\"/odom\"}";
            byte[] subscribeRequestBytes = System.Text.Encoding.UTF8.GetBytes(subscribeRequest);
            await rosSocket.SendAsync(new ArraySegment<byte>(subscribeRequestBytes), WebSocketMessageType.Text, true, CancellationToken.None);

            // Start receiving messages
            _ = ReceiveMessages();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to Rosbridge: {ex.Message}");
        }
    }

    private async Task ReceiveMessages()
    {
        try
        {
            while (rosSocket.State == WebSocketState.Open)
            {
                var buffer = new byte[4096];
                var result = await rosSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                if (result.Count > 0)
                {
                    string odomData = System.Text.Encoding.UTF8.GetString(buffer, 0, result.Count);
                    //Console.WriteLine($"Received data: {odomData}");
                    ExtractMessage(odomData);
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error receiving data: {ex.Message}");
        }
    }

    private void ExtractMessage(string jsonData)
    {
        try
        {
            var jObject = JObject.Parse(jsonData);
            var position = jObject["msg"]?["pose"]?["pose"]?["position"];
            var orientation = jObject["msg"]?["pose"]?["pose"]?["orientation"];

            if (position != null)
            {
                positionX = position.Value<double>("x");
                positionY = position.Value<double>("y");
                positionZ = position.Value<double>("z");
                // Định dạng giá trị
                positionXFormatted = positionX.ToString("F2");
                positionYFormatted = positionY.ToString("F2");
                positionZFormatted = positionZ.ToString("F2");
            }

            if (orientation != null)
            {
                orientationX = orientation.Value<double>("x");
                orientationY = orientation.Value<double>("y");
                orientationZ = orientation.Value<double>("z");
                orientationW = orientation.Value<double>("w");
                // Định dạng giá trị
                orientationXFormatted = orientationX.ToString("F2");
                orientationYFormatted = orientationY.ToString("F2");
                orientationZFormatted = orientationZ.ToString("F2");
                orientationWFormatted = orientationW.ToString("F2");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error extracting message: {ex.Message}");
        }
    }
}
