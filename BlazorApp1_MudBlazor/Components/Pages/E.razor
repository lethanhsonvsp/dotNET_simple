@page "/e"
@using RosbridgeNet.RosbridgeClient.Common.Interfaces
@using RosbridgeNet.RosbridgeClient.ProtocolV2.Generics
@inject IRosbridgeMessageDispatcher MessageDispatcher
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer

<h3>Rosbridge Communication</h3>
<MudButton @onclick="Test">Test</MudButton>

<div tabindex="0" @onkeydown="HandleKeyPress" style="border: 1px solid black; padding: 10px;">
    <p style="font-weight: bold; margin-bottom: 10px;">Nhấn các phím để điều khiển robot</p>
    <table style="width: 100%; border-collapse: collapse;">
        <tr>
            <td style="padding: 5px;"><b>i</b>: tiến</td>
            <td style="padding: 5px;"><b>u</b>: tiến trái</td>
            <td style="padding: 5px;"><b>o</b>: tiến phải</td>
        </tr>
        <tr>
            <td style="padding: 5px;"><b>k</b>: dừng</td>
            <td style="padding: 5px;"><b>j</b>: quay cùng chiều kim đồng hồ</td>
            <td style="padding: 5px;"><b>l</b>: quay ngược chiều kim đồng hồ</td>
        </tr>
        <tr>
            <td style="padding: 5px;"><b>,</b>: lùi</td>
            <td style="padding: 5px;"><b>m</b>: lùi trái</td>
            <td style="padding: 5px;"><b>.</b>: lùi phải</td>
        </tr>
    </table>
</div>

<p>@message</p>
<p>Position: (x: @positionX, y: @positionY, z: @positionZ)</p>
<p>Orientation: (x: @orientationX, y: @orientationY, z: @orientationZ, w: @orientationW)</p>

@code
{
    private string message = "Waiting for message...";
    private double positionX = 0.0;
    private double positionY = 0.0;
    private double positionZ = 0.0;
    private double orientationX = 0.0;
    private double orientationY = 0.0;
    private double orientationZ = 0.0;
    private double orientationW = 0.0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SubscribeToTopic();
    }

    private async Task SubscribeToTopic()
    {
        try
        {
            var subscriber = new RosSubscriber<PoseWithCovarianceStamped>(MessageDispatcher, "/amcl_pose");
            subscriber.RosMessageReceived += (s, e) =>
            {
                InvokeAsync(() =>
                {
                    message = e.RosMessage.ToString();
                    if (e.RosMessage.pose != null)
                    {
                        positionX = e.RosMessage.pose.pose.position.x;
                        positionY = e.RosMessage.pose.pose.position.y;
                        positionZ = e.RosMessage.pose.pose.position.z;
                        orientationX = e.RosMessage.pose.pose.orientation.x;
                        orientationY = e.RosMessage.pose.pose.orientation.y;
                        orientationZ = e.RosMessage.pose.pose.orientation.z;
                        orientationW = e.RosMessage.pose.pose.orientation.w;
                    }
                    StateHasChanged();
                });
            };
            await subscriber.SubscribeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error subscribing to topic: " + ex.ToString());
        }
    }

    private async Task PublishMessage(Twist twist)
    {
        try
        {
            var publisher = new RosPublisher<Twist>(MessageDispatcher, "/cmd_vel");
            await publisher.AdvertiseAsync();
            await publisher.PublishAsync(twist);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "i":
                await MoveForward();
                break;
            case "u":
                await MoveForwardLeft();
                break;
            case "o":
                await MoveForwardRight();
                break;
            case "k":
                await Stop();
                break;
            case "j":
                await TurnClockwise();
                break;
            case "l":
                await TurnCounterClockwise();
                break;
            case ",":
                await MoveBackward();
                break;
            case "m":
                await MoveBackwardLeft();
                break;
            case ".":
                await MoveBackwardRight();
                break;
        }
    }

    public float a = 0.2f;
    public float b = 0.5f;

    private async Task MoveForward()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = a, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = 0 }
            });
    }

    private async Task MoveForwardLeft()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = a, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = b }
            });
    }

    private async Task MoveForwardRight()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = a, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = -b }
            });
    }

    private async Task Stop()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = 0, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = 0 }
            });
    }

    private async Task TurnClockwise()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = 0, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = -b }
            });
    }

    private async Task TurnCounterClockwise()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = 0, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = b }
            });
    }

    private async Task MoveBackward()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = -a, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = 0 }
            });
    }

    private async Task MoveBackwardLeft()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = -a, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = b }
            });
    }

    private async Task MoveBackwardRight()
    {
        await PublishMessage(new Twist()
            {
                linear = new Vector() { x = -a, y = 0, z = 0 },
                angular = new Vector() { x = 0, y = 0, z = -b }
            });
    }

    private void Test()
    {
        Console.WriteLine("test");
    }

    public void Dispose()
    {
        // Dọn dẹp tài nguyên nếu cần
    }
}
